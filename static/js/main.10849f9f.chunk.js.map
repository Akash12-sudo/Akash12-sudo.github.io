{"version":3,"sources":["Demo.js","index.js"],"names":["Demo","useState","Items","setItems","text","setText","rand","setRand","resp","setResp","setSpeech","x","setx","spech","Speech","init","voices","useEffect","speak","fetch","method","headers","body","JSON","stringify","slice","length","then","res","json","data","oldItem","response","console","log","className","map","itemval","key","type","onChange","e","target","value","onClick","olditem","ReactDOM","render","document","getElementById"],"mappings":"+KA8GeA,EAvGF,WAET,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAwBF,mBAAS,IAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAAwBJ,mBAAS,IAAjC,mBAAOK,EAAP,KAAaC,EAAb,KACA,EAAwBN,mBAAS,IAAjC,mBAAOO,EAAP,KAAaC,EAAb,KACA,EAA4BR,mBAAS,MAArC,mBAAeS,GAAf,WACA,EAAkBT,mBAAS,GAA3B,mBAAOU,EAAP,KAAUC,EAAV,KAEMC,EAAQ,IAAIC,IAwDlB,OAvDAD,EAAME,KAAK,CACP,OAAU,EACV,KAAQ,QACR,KAAQ,EACR,MAAS,EACT,MAAS,2BACT,gBAAkB,EAClB,UAAa,CACT,gBAAmB,SAACC,QAW5BC,qBAAU,WACNJ,EAAMK,MAAM,CAAEd,KAAK,iEACpB,IAEHa,qBAAU,WACNE,MAAM,uDAAwD,CAE1DC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUlB,EAAKmB,MAAM,EAAGnB,EAAKoB,OAAS,MAElDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAAAG,GAC5BrB,GAAQ,SAACsB,GAAc,MAAM,GAAN,mBAAWA,GAAX,CAAoBD,EAAKE,cAEhDnB,EAAMK,MAAM,CAACd,KAAM0B,EAAKE,WAAWL,MAAK,WAAKM,QAAQC,IAAI,cACzDxB,EAAUoB,EAAKE,eAEpB,CAAC1B,IAkBA,mCACI,gCACI,qBAAK6B,UAAU,SAAf,SACI,qBAAKA,UAAU,UAAf,uBAEJ,qBAAKA,UAAU,SAAf,SACKjC,EAAMkC,KAAI,SAACC,EAASC,GACjB,OAAO,qCACH,mBAAGH,UAAU,cAAb,SAA4BE,IAC5B,mBAAGF,UAAU,YAAb,SAA0B3B,EAAK8B,EAAM,aAIjD,sBAAKH,UAAU,QAAf,UACI,uBAAOI,KAAK,OAAOC,SAAU,SAACC,GAAQpC,EAAQoC,EAAEC,OAAOC,QAAUA,MAAOvC,IACxE,wBAAQwC,QAAS,WACbhC,EAAKD,EAAI,GACI,KAATP,GACAD,GAAS,SAAC0C,GAEN,MAAM,GAAN,mBAAWA,GAAX,CAAoBzC,OAIf,KAATA,GACAG,EAAQH,EAAOO,GAGnBN,EAAQ,KAbZ,2BClFpByC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,U","file":"static/js/main.10849f9f.chunk.js","sourcesContent":["\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Speech from 'speak-tts';\n\n\n\nconst Demo = () => {\n\n    const [Items, setItems] = useState([]);\n    const [text, setText] = useState(\"\");\n    const [rand, setRand] = useState('');\n    const [resp, setResp] = useState([]);\n    const [speech, setSpeech] = useState(null);\n    const [x, setx] = useState(0);\n\n    const spech = new Speech();\n    spech.init({\n        'volume': 1,\n        'lang': 'en-GB',\n        'rate': 1,\n        'pitch': 1,\n        'voice': 'Google UK English Female',\n        'splitSentences': true,\n        'listeners': {\n            'onvoiceschanged': (voices) => {\n                // console.log(\"Event voiceschanged\", voices)\n            }\n        }\n    })\n\n    // console.log(rand);\n\n    //   https://assistant-ai-chatbot.herokuapp.com//response\n    //   https://assistant-ai-chatbot.herokuapp.com//greet\n\n    useEffect(() => {\n        spech.speak({ text:\"Welcome in your own assistant Chatbot. How can I help you?\"});\n    }, [])\n\n    useEffect(() => {\n        fetch('https://assistant-ai-chatbot.herokuapp.com//response', {\n\n            method: \"POST\",\n            headers: {\n                \"Content-type\": \"application/json\",\n            },\n            body: JSON.stringify(rand.slice(0, rand.length - 1)),\n\n        }).then(res => res.json()).then(data => {\n            setResp((oldItem) => { return [...oldItem, data.response] })\n            // console.log(data.response);\n            spech.speak({text: data.response}).then(()=>{console.log(\"success\")});\n            setSpeech(data.response);\n        })\n    }, [rand])\n\n    // useEffect(() => {\n    //     spech.speak({text: speech}).then(()=>{console.log(\"success\")}).catch(e => {console.log(e)});\n    // }, [speech])\n\n    // {Items.map((item, key) => {\n    //   return\n    //   <>\n    //   console.log(item);\n    //   console.log(resp[key+1]);\n    //   </>\n    // })}\n    // useEffect(()=>{\n    // Items.map((item, key)=>{return console.log(item, key)});\n    // },[rand])\n\n    return (\n        <>\n            <div>\n                <div className=\"header\">\n                    <div className=\"heading\">CHATBOT</div>\n                </div>\n                <div className=\"middle\">\n                    {Items.map((itemval, key) => {\n                        return <>\n                            <p className=\"middle-para\">{itemval}</p>\n                            <p className=\"resp_para\">{resp[key + 1]}</p>\n                        </>;\n                    })}\n                </div>\n                <div className=\"lower\">\n                    <input type=\"text\" onChange={(e) => { setText(e.target.value) }} value={text}></input>\n                    <button onClick={() => {\n                        setx(x + 1);\n                        if (text !== \"\") {\n                            setItems((olditem) => {\n                                // console.log(...olditem);\n                                return [...olditem, text]\n                            })\n                        }\n\n                        if (text !== \"\") {\n                            setRand(text + x);\n                        }\n\n                        setText(\"\");\n                    }}>SEND</button>\n                </div>\n            </div>\n        </>\n    )\n\n};\n\nexport default Demo;","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport Demo from './Demo';\n\nReactDOM.render(\n  <Demo />,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}